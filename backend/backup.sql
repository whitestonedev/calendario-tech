--
-- PostgreSQL database dump
--

-- Dumped from database version 15.13 (Debian 15.13-1.pgdg120+1)
-- Dumped by pg_dump version 15.13 (Debian 15.13-0+deb12u1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: currencies; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.currencies AS ENUM (
    'BRL',
    'USD',
    'EUR',
    'AUD',
    'CAD'
);


ALTER TYPE public.currencies OWNER TO postgres;

--
-- Name: event_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.event_status AS ENUM (
    'requested',
    'approved',
    'declined'
);


ALTER TYPE public.event_status OWNER TO postgres;

--
-- Name: states; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.states AS ENUM (
    'AP',
    'AM',
    'BA',
    'CE',
    'DF',
    'ES',
    'GO',
    'MA',
    'MT',
    'MS',
    'MG',
    'PA',
    'PB',
    'PR',
    'PE',
    'PI',
    'RJ',
    'RN',
    'RS',
    'RO',
    'RR',
    'SC',
    'SP',
    'SE',
    'TO'
);


ALTER TYPE public.states OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO postgres;

--
-- Name: event_intl; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.event_intl (
    id integer NOT NULL,
    event_id integer NOT NULL,
    lang character varying NOT NULL,
    event_edition character varying,
    cost double precision,
    currency public.currencies,
    banner_link character varying,
    short_description character varying
);


ALTER TABLE public.event_intl OWNER TO postgres;

--
-- Name: event_intl_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.event_intl_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.event_intl_id_seq OWNER TO postgres;

--
-- Name: event_intl_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.event_intl_id_seq OWNED BY public.event_intl.id;


--
-- Name: event_tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.event_tags (
    id integer NOT NULL,
    event_id integer NOT NULL,
    tag_id integer NOT NULL
);


ALTER TABLE public.event_tags OWNER TO postgres;

--
-- Name: event_tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.event_tags_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.event_tags_id_seq OWNER TO postgres;

--
-- Name: event_tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.event_tags_id_seq OWNED BY public.event_tags.id;


--
-- Name: events; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.events (
    id integer NOT NULL,
    organization_name character varying NOT NULL,
    event_name character varying NOT NULL,
    start_datetime timestamp without time zone NOT NULL,
    end_datetime timestamp without time zone NOT NULL,
    maps_link character varying,
    online boolean,
    event_link character varying,
    address character varying,
    state public.states NOT NULL,
    is_free boolean NOT NULL,
    status public.event_status NOT NULL
);


ALTER TABLE public.events OWNER TO postgres;

--
-- Name: COLUMN events.is_free; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.events.is_free IS 'Indicates if the event is free or not';


--
-- Name: events_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.events_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.events_id_seq OWNER TO postgres;

--
-- Name: events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.events_id_seq OWNED BY public.events.id;


--
-- Name: tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tags (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE public.tags OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.tags_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tags_id_seq OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.tags_id_seq OWNED BY public.tags.id;


--
-- Name: event_intl id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_intl ALTER COLUMN id SET DEFAULT nextval('public.event_intl_id_seq'::regclass);


--
-- Name: event_tags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_tags ALTER COLUMN id SET DEFAULT nextval('public.event_tags_id_seq'::regclass);


--
-- Name: events id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.events ALTER COLUMN id SET DEFAULT nextval('public.events_id_seq'::regclass);


--
-- Name: tags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags ALTER COLUMN id SET DEFAULT nextval('public.tags_id_seq'::regclass);


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.alembic_version (version_num) FROM stdin;
ecf0a0c53a6d
\.


--
-- Data for Name: event_intl; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.event_intl (id, event_id, lang, event_edition, cost, currency, banner_link, short_description) FROM stdin;
1	1	pt-br	IWD'25	0	BRL	https://secure-content.meetupstatic.com/images/classic-events/525851673/676x676.jpg	Estamos preparando um evento incrível para comemorar o Dia Internacional da Mulher! Deixe sua vaga já garantida que logo traremos novidades!
2	1	en-us	IWD'25	0	BRL	https://secure-content.meetupstatic.com/images/classic-events/525851673/676x676.jpg	We’re gearing up an amazing event to celebrate International Women’s Day! Secure your spot now and stay tuned for updates!
3	1	es-es	IWD'25	0	BRL	https://secure-content.meetupstatic.com/images/classic-events/525851673/676x676.jpg	¡Estamos preparando un evento increíble para celebrar el Día Internacional de la Mujer! Asegura tu lugar y mantente atento a las novedades.
\.


--
-- Data for Name: event_tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.event_tags (id, event_id, tag_id) FROM stdin;
1	1	1
2	1	2
3	1	3
\.


--
-- Data for Name: events; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.events (id, organization_name, event_name, start_datetime, end_datetime, maps_link, online, event_link, address, state, is_free, status) FROM stdin;
1	Women Techmakers Curitiba	Encontro #7 WTM - IWD'25 / Dia Internacional da Mulher	2025-03-22 12:00:00	2025-03-22 16:00:00	https://www.google.com/maps/search/?api=1&query=Rua+Mariano+Torres%2C+729+Curitiba	f	https://www.meetup.com/pt-BR/women-techmakers-curitiba/events/305753276/	Rua Mariano Torres, 729 - Centro - 80060-120, Curitiba - PR	SC	t	approved
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tags (id, name) FROM stdin;
1	WTM
2	Dia Internacional da Mulher
3	Curitiba
\.


--
-- Name: event_intl_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.event_intl_id_seq', 3, true);


--
-- Name: event_tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.event_tags_id_seq', 3, true);


--
-- Name: events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.events_id_seq', 1, true);


--
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tags_id_seq', 3, true);


--
-- Name: alembic_version alembic_version_pkc; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.alembic_version
    ADD CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num);


--
-- Name: event_intl event_intl_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_intl
    ADD CONSTRAINT event_intl_pkey PRIMARY KEY (id);


--
-- Name: event_tags event_tags_event_id_tag_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_tags
    ADD CONSTRAINT event_tags_event_id_tag_id_key UNIQUE (event_id, tag_id);


--
-- Name: event_tags event_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_tags
    ADD CONSTRAINT event_tags_pkey PRIMARY KEY (id);


--
-- Name: events events_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- Name: tags tags_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_name_key UNIQUE (name);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: event_intl event_intl_event_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_intl
    ADD CONSTRAINT event_intl_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE;


--
-- Name: event_tags event_tags_event_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_tags
    ADD CONSTRAINT event_tags_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE;


--
-- Name: event_tags event_tags_tag_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_tags
    ADD CONSTRAINT event_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tags(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

